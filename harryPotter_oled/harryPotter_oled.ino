#define __DEBUG__

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Definir constantes
#define ANCHO_PANTALLA 128 // ancho pantalla OLED
#define ALTO_PANTALLA 64 // alto pantalla OLED

// Objeto de la clase Adafruit_SSD1306
Adafruit_SSD1306 display(ANCHO_PANTALLA, ALTO_PANTALLA, &Wire, -1);

static const unsigned char PROGMEM datos_imagen[784] = {
     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xb7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x01, 0xff, 0xff, 0xf9, 0xff, 0xfe, 0x07, 0x8f, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 
    0xfd, 0x27, 0x83, 0xff, 0xe3, 0xf0, 0x9f, 0xff, 0x03, 0x07, 0xff, 0xf9, 0xfb, 0xff, 0xff, 0xff, 
    0xfe, 0x0f, 0x83, 0xff, 0xc3, 0x60, 0x1f, 0xff, 0x07, 0x83, 0xff, 0xf1, 0xf7, 0xff, 0xff, 0xff, 
    0xfe, 0x07, 0x83, 0xcf, 0x80, 0x60, 0x0f, 0xff, 0x07, 0x83, 0xff, 0xe1, 0xf3, 0xff, 0xff, 0xff, 
    0xfe, 0x0f, 0x83, 0x87, 0x40, 0x31, 0x8f, 0xff, 0x03, 0x87, 0xff, 0xc1, 0xe7, 0xff, 0xfd, 0xff, 
    0xfe, 0x0f, 0x86, 0x03, 0xe2, 0x21, 0x0f, 0xff, 0x07, 0x83, 0xff, 0x00, 0x43, 0xff, 0xf9, 0xbf, 
    0xfe, 0x07, 0x82, 0x11, 0xc2, 0x11, 0xbf, 0xff, 0x07, 0x87, 0xff, 0xa1, 0x43, 0xf3, 0xf0, 0x1f, 
    0xfe, 0x0f, 0x83, 0x38, 0xe3, 0x31, 0x7f, 0xbf, 0x83, 0x83, 0xe7, 0xe1, 0x80, 0xe0, 0xc0, 0x0f, 
    0xfe, 0x0f, 0x83, 0x70, 0xc2, 0x61, 0xff, 0x8f, 0x87, 0x87, 0x81, 0xe1, 0x02, 0x8c, 0x41, 0x0f, 
    0xff, 0x07, 0x87, 0xf8, 0xe3, 0xf0, 0x07, 0x8f, 0x02, 0x07, 0x18, 0xe1, 0xc3, 0x8c, 0x21, 0x0f, 
    0xfe, 0x0f, 0x83, 0xf0, 0x63, 0xe1, 0x87, 0x9e, 0x00, 0x06, 0x30, 0x61, 0xc3, 0x0c, 0x31, 0x8f, 
    0xfe, 0x0f, 0x82, 0x18, 0xc1, 0xf1, 0x87, 0x1e, 0x05, 0x80, 0x00, 0x61, 0xc7, 0x0e, 0x21, 0xbf, 
    0xf7, 0x07, 0x81, 0x18, 0x63, 0xe0, 0x86, 0x3e, 0x02, 0x0c, 0x38, 0x61, 0xc3, 0x02, 0x21, 0x7f, 
    0xce, 0x0f, 0x82, 0x30, 0xc1, 0xf1, 0xc2, 0x7e, 0x06, 0x7c, 0x38, 0x63, 0xc3, 0x08, 0x21, 0xff, 
    0xef, 0x06, 0x06, 0x38, 0x63, 0xe0, 0xc2, 0x7f, 0x03, 0xfc, 0x38, 0x61, 0xc3, 0x0f, 0xe1, 0xff, 
    0xe6, 0x04, 0x02, 0x18, 0xe1, 0xe1, 0xc0, 0x7f, 0x03, 0xfe, 0x38, 0x61, 0xc3, 0x0f, 0xe1, 0xff, 
    0xf0, 0x00, 0x82, 0x18, 0x41, 0xe1, 0xe0, 0xff, 0x03, 0xfc, 0x3c, 0x63, 0xc3, 0x0f, 0xe1, 0xff, 
    0xfc, 0x07, 0x82, 0x18, 0xe1, 0xe0, 0xe1, 0xff, 0x03, 0xfc, 0x38, 0x61, 0xc3, 0x0f, 0xe1, 0xff, 
    0xff, 0x0f, 0x87, 0x10, 0x41, 0xcd, 0xe1, 0xff, 0x0b, 0xfc, 0x38, 0x61, 0xc3, 0x8e, 0xe1, 0xff, 
    0xff, 0x07, 0x83, 0x00, 0x89, 0xff, 0xe3, 0xfe, 0x0f, 0xfe, 0x1c, 0x23, 0xc3, 0x0e, 0x61, 0xff, 
    0xfe, 0x07, 0xc3, 0x09, 0xff, 0xff, 0xe7, 0xfe, 0x0f, 0xfc, 0x38, 0x61, 0xc3, 0x8e, 0x70, 0xff, 
    0xff, 0x0f, 0x83, 0xbb, 0xff, 0x1f, 0xc7, 0xfe, 0x0f, 0xfe, 0x38, 0x61, 0xc3, 0xc4, 0xe1, 0xff, 
    0xfe, 0x07, 0x87, 0xff, 0xfe, 0x7f, 0xcf, 0xff, 0x0f, 0xff, 0x98, 0xe3, 0xc3, 0xe5, 0xe1, 0xff, 
    0xff, 0x07, 0x83, 0xff, 0xfe, 0x7f, 0x8f, 0xff, 0x0f, 0xff, 0x81, 0xc1, 0xc3, 0xf3, 0xe0, 0xff, 
    0xfe, 0x0f, 0xc3, 0xff, 0xff, 0x00, 0x1f, 0xff, 0x07, 0xff, 0xef, 0xe3, 0xc3, 0xff, 0xc0, 0xff, 
    0xff, 0x07, 0x83, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0x0f, 0xff, 0xff, 0xf1, 0xc3, 0xdf, 0xf4, 0x3f, 
    0xfe, 0x07, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xfd, 0xe3, 0x8f, 0xff, 0xdf, 
    0xfc, 0x07, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xfe, 0xf0, 0xdf, 0xff, 0xff, 
    0xff, 0xfb, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 
    0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0xb5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

///////// para la melodia //////////
/* 
  Hedwig's theme - Harry Potter 
  Connect a piezo buzzer or speaker to pin 11 or select a new pin.
  More songs available at https://github.com/robsoncouto/arduino-songs                                            
                                              
                                              Robson Couto, 2019
*/

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST 0

// change this to make the song slower or faster
int tempo = 144;

// change this to whichever pin you want to use
int buzzer = 11;

// notes of the moledy followed by the duration.
// a 4 means a quarter note, 8 an eighteenth , 16 sixteenth, so on
// !!negative numbers are used to represent dotted notes,
// so -4 means a dotted quarter note, that is, a quarter plus an eighteenth!!
int melody[] = {


  // Hedwig's theme fromn the Harry Potter Movies
  // Socre from https://musescore.com/user/3811306/scores/4906610
  
  REST, 2, NOTE_D4, 4,
  NOTE_G4, -4, NOTE_AS4, 8, NOTE_A4, 4,
  NOTE_G4, 2, NOTE_D5, 4,
  NOTE_C5, -2, 
  NOTE_A4, -2,
  NOTE_G4, -4, NOTE_AS4, 8, NOTE_A4, 4,
  NOTE_F4, 2, NOTE_GS4, 4,
  NOTE_D4, -1, 
  NOTE_D4, 4,

  NOTE_G4, -4, NOTE_AS4, 8, NOTE_A4, 4, //10
  NOTE_G4, 2, NOTE_D5, 4,
  NOTE_F5, 2, NOTE_E5, 4,
  NOTE_DS5, 2, NOTE_B4, 4,
  NOTE_DS5, -4, NOTE_D5, 8, NOTE_CS5, 4,
  NOTE_CS4, 2, NOTE_B4, 4,
  NOTE_G4, -1,
  NOTE_AS4, 4,
     
  NOTE_D5, 2, NOTE_AS4, 4,//18
  NOTE_D5, 2, NOTE_AS4, 4,
  NOTE_DS5, 2, NOTE_D5, 4,
  NOTE_CS5, 2, NOTE_A4, 4,
  NOTE_AS4, -4, NOTE_D5, 8, NOTE_CS5, 4,
  NOTE_CS4, 2, NOTE_D4, 4,
  NOTE_D5, -1, 
  REST,4, NOTE_AS4,4,  

  NOTE_D5, 2, NOTE_AS4, 4,//26
  NOTE_D5, 2, NOTE_AS4, 4,
  NOTE_F5, 2, NOTE_E5, 4,
  NOTE_DS5, 2, NOTE_B4, 4,
  NOTE_DS5, -4, NOTE_D5, 8, NOTE_CS5, 4,
  NOTE_CS4, 2, NOTE_AS4, 4,
  NOTE_G4, -1, 
  
};

// sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
// there are two values per note (pitch and duration), so for each note there are four bytes
int notes = sizeof(melody) / sizeof(melody[0]) / 2;

// this calculates the duration of a whole note in ms (60s/tempo)*4 beats
int wholenote = (60000 * 4) / tempo;

int divider = 0, noteDuration = 0;





void setup() {
#ifdef __DEBUG__
  Serial.begin(9600);
  delay(100);
  Serial.println("Iniciando pantalla OLED");
#endif

  // Iniciar pantalla OLED en la direcci√≥n 0x3C
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
#ifdef __DEBUG__
    Serial.println("No se encuentra la pantalla OLED");
#endif
    while (true);
  }

  // Clear the buffer.
  display.clearDisplay();
  
  // Draw bitmap on the screen
  display.drawBitmap(1, 16, datos_imagen, 128, 49, SSD1306_WHITE);
  display.display();

  /////////////////////
  ////// Melodia //////

 // iterate over the notes of the melody. 
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {

    // calculates the duration of each note
    divider = melody[thisNote + 1];
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenote) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenote) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzer, melody[thisNote], noteDuration*0.9);

    // Wait for the specief duration before playing the next note.
    delay(noteDuration);
    
    // stop the waveform generation before the next note.
    noTone(buzzer);
  }





}

void loop() {}